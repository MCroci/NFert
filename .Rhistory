#'   It should have at least two columns: "crop" (character) and "N" (numeric).
#' @param crop The name of the crop for which to calculate the requirement. Must be a valid
#'   value in the `crop` column of the `uptake_table`.
#'
#' @return A list containing:
#'   - N_requirement_kg_ha: The calculated nitrogen requirement in kilograms per hectare (kg/ha).
#'   - units: The units of the output value ("kg/ha").
#'
#' @note The `uptake_table` should provide the unit crop absorption for the specified
#'   `crop`. The default table (`NFert::uptake_table`) may not be suitable for all regions
#'   or specific crop varieties.
#'
#' @export
crop_requirements <- function(expected_yield_tons_ha = 10,
uptake_table=NFert::uptake_table,
crop = "Mais trinciato (classe 700)") {
# Error Handling and Input Validation
if (!crop %in% uptake_table$crop) {
stop(paste("Crop '", crop, "' not found in the uptake table."))
}
if (expected_yield_tons_ha <= 0) {
stop("Expected yield must be a positive value.")
}
# Extraction and Calculation
N_perc <- uptake_table$N[uptake_table$crop == crop]
N_requirement_kg_ha <- expected_yield_tons_ha * N_perc * 10  # Directly calculate kg/ha
# Return with Units
return(list(
N_requirement_kg_ha = N_requirement_kg_ha,
units = "kg/ha"  # Add units for clarity
))
}
crop_requirements()
NFert::e.table
NFert::ca.table
NFert::cb.table
usethis::use_release_issue()
devtools::check()
devtools::check_win_devel()
devtools::check_win_devel()
f.table <- readxl::read_excel("data-raw/table.xlsx", sheet = "f")
f.table
usethis::use_data(f.table, overwrite = TRUE)
g.table = readxl::read_excel("data-raw/table.xlsx", sheet = "g"),
g.table = readxl::read_excel("data-raw/table.xlsx", sheet = "g")
usethis::use_data(g.table, overwrite = TRUE)
View(g.table)
View(coef_time)
coef_time
tri2.table <- as.matrix(readxl::read_excel("data-raw/table.xlsx", sheet="tri2") )
tri2.table <- as.matrix(readxl::read_excel("data-raw/table.xlsx", sheet="tri2") )
tri3.table <- as.matrix(readxl::read_excel("data-raw/table.xlsx", sheet="tri3") )
usethis::use_data(tri3.table, overwrite = TRUE)
usethis::use_data(tri2.table, overwrite = TRUE)
usethis::use_data(tri3.table, overwrite = TRUE)
devtools::load_all(".")
devtools::load_all(".")
NFert::e.table
devtools::load_all(".")
usethis::use_testthat()
NFert::e.table
load("C:/Users/croci/OneDrive - Università Cattolica del Sacro Cuore/rds/research/10. r_package/NFert/data/e.table.rda")
lazyLoad(NFert::e.table)
lazyLoad(NFert::e.table)
lazyLoad
lazyLoad(NFert::e.table)
devtools::load_all(".")
load("C:/Users/croci/OneDrive - Università Cattolica del Sacro Cuore/rds/research/10. r_package/NFert/data/e.table.rda")
devtools::load_all(".")
devtools::load_all(".")
library(NFert)
NFert::nitrogen_from_previous_crop_residues()
devtools::load_all(".")
tri2.table <- as.matrix(tri2.table)
tri2.table
soil.table <- readxl::read_excel("data-raw/table.xlsx", sheet="soil")
usethis::use_data(soil.table, overwrite = TRUE)
calc_soil_group_and_id_rag
library(NFert)
library(NFert)
NFert::leaching_loss()
devtools::load_all(".")
NFert::calc_soil_group_and_id_rag()
library(NFert)
devtools::load_all(".")
NFert::calc_crop_N_demand()
library(NFert)
library(NFert)
library(NFert)
devtools::load_all(".")
devtools::load_all(".")
library(NFert)
library(NFert)
library(NFert)
NFert::tri2.table
tri2.table <- as.matrix(NFert::tri2.table)
View(tri2.table)
devtools::load_all(".")
library(NFert)
??NFert::tri2
library(NFert)
?tri2()
NFert::tri3.table
tri3.table <- NFert::tri3.table
View(tri3.table)
usethis::use_vignette("NFert", "Nitrogen fertilisation of field crops")
library(NFert)
tri2(clay=10, sand=40)
tri3(clay=10, sand=40)
library(NFert)
library(NFert)
tri2.table
library(NFert)
calc_crop_N_demand(expected_yield_tons_ha = 10, crop = "Mais trinciato (classe 700)")
calc_crop_N_demand(expected_yield_tons_ha = 30, crop = "Mais trinciato (classe 700)")
NFert::uptake_table
---
title: "Nitrogen fertilisation of field crops"
```{r}
print(NFert::uptake_table)
print(round(NFert::uptake_table,3))
print(NFert::uptake_table)
calc_crop_N_demand(expected_yield_tons_ha = 30, crop = "Grano tenero FF (granella)")
calc_crop_N_demand(expected_yield_tons_ha = 5, crop = "Grano tenero FF (granella)")
calc_crop_N_demand(expected_yield_tons_ha = 6, crop = "Grano tenero FF (granella)")
#' Soil Texture Class Determination
#'
#' Determines the soil texture class (ID_Rag) based on clay and sand percentages.
#'
#' @param clay Percentage of clay in the soil.
#' @param sand Percentage of sand in the soil.
#' @param tri2.table A matrix containing the soil texture class IDs based on
#'   clay and sand percentages. The default is `NFert::tri2.table`.
#'
#' @return The soil texture class ID (ID_Rag) corresponding to the given clay
#'   and sand percentages.
#'
#' @note
#'   - This function uses the USDA soil texture triangle classification.
#'   - Ensure the `clay` and `sand` percentages are valid (within 0-100).
#'
#' @export
#'
#' @examples
#' tri2(clay = 10, sand = 35)
#' tri2(clay = 25, sand = 20)  # Clay loam
tri2 <- function(clay = 10, sand = 35, tri2.table = NFert::tri2.table) {
# Input Validation
if (!is.numeric(clay) || clay < 0 || clay > 100) {
stop("Invalid clay percentage. Must be a numeric value between 0 and 100.")
}
if (!is.numeric(sand) || sand < 0 || sand > 100) {
stop("Invalid sand percentage. Must be a numeric value between 0 and 100.")
}
# Ensure tri2.table is a matrix
if (!is.matrix(tri2.table)) {
tri2.table <- as.matrix(tri2.table)
}
# Determine row and column indices (simplified)
row <- 101 - round(clay)
col <- 1 + round(sand)
# Retrieve ID_Rag
res <- tri2.table[row, col]
# Check if result is valid (exists in tri2.table)
valid_ids <- unique(as.vector(tri2.table))  # Get all unique IDs from the table
if (!res %in% valid_ids) {
stop("Invalid clay and sand combination. No corresponding soil texture class found.")
}
return(res)
}
tri2()
tri2()
tri2(clay = 100, sand = 10)
tri2(clay = 101, sand = 10)
#' Soil Texture Class Determination
#'
#' Determines the soil texture class (ID_Rag) based on clay and sand percentages.
#'
#' @param clay Percentage of clay in the soil.
#' @param sand Percentage of sand in the soil.
#' @param tri2.table A matrix containing the soil texture class IDs based on
#'   clay and sand percentages. The default is `NFert::tri2.table`.
#'
#' @return The soil texture class ID (ID_Rag) corresponding to the given clay
#'   and sand percentages.
#'
#' @note
#'   - This function uses the USDA soil texture triangle classification.
#'   - Ensure the `clay` and `sand` percentages are valid (within 0-100) and their sum does not exceed 100.
#'
#' @export
#'
#' @examples
#' tri2(clay = 10, sand = 35)
#' tri2(clay = 25, sand = 20)  # Clay loam
tri2 <- function(clay = 10, sand = 35, tri2.table = NFert::tri2.table) {
# Input Validation
if (!is.numeric(clay) || clay < 0 || clay > 100) {
stop("Invalid clay percentage. Must be a numeric value between 0 and 100.")
}
if (!is.numeric(sand) || sand < 0 || sand > 100) {
stop("Invalid sand percentage. Must be a numeric value between 0 and 100.")
}
# Additional Validation: Check if clay + sand <= 100
if (clay + sand > 100) {
stop("Invalid clay and sand combination. Their sum must not exceed 100%.")
}
# Ensure tri2.table is a matrix
if (!is.matrix(tri2.table)) {
tri2.table <- as.matrix(tri2.table)
}
# Determine row and column indices (simplified)
row <- 101 - round(clay)
col <- 1 + round(sand)
# Retrieve ID_Rag
res <- tri2.table[row, col]
# Check if result is valid (exists in tri2.table)
valid_ids <- unique(as.vector(tri2.table))  # Get all unique IDs from the table
if (!res %in% valid_ids) {
stop("Invalid clay and sand combination. No corresponding soil texture class found.")
}
return(res)
}
tri2()
tri2(clay = 100)
devtools::load_all(".")
library(NFert)
library(NFert)
?NFert::tri2
devtools::load_all(".")
library(NFert)
?NFert::tri2
library(NFert)
??NFert::calc_soil_group_and_id_rag
TRI3 <- tri3(clay, sand, tri3.table)
tri3()
library(NFert)
devtools::load_all(".")
library(NFert)
??NFert::calc_soil_group_and_id_rag
tri3.table
soil.table
library(NFert)
print(NFert::soil.table)
devtools::load_all(".")
calc_soil_group_and_id_rag(clay = 10, sand = 40)
soil_fertility(Ntot = 1.2, SOM = 2, soil.group = "Loamy textures")
??soil_fertility()
??soil_fertility
soil_fertility()
soil_fertility(Ntot = 1.2, SOM = 2, soil.group = "Loamy textures", ccp = )
?soil_fertility
leaching_loss()
leaching_loss(b1 = 31.2)
leaching_loss(b1 = 31.2, winter_rain = 160, start_spring_rain = 160)
NFert::nitrogen_from_previous_crop_residues(previous_crop = "Winter cereals straw removal")
NFert::e.table
NFert::nitrogen_from_previous_crop_residues(previous_crop = "Winter cereals straw removal")
NFert::e.table
devtools::load_all(".")
library(NFert)
library(NFert)
library(NFert)
NFert::nitrogen_from_previous_crop_residues(previous_crop = "Winter cereals straw removal")
NFert::organic_fertilization(source = "Cattle slurry", frequency = "every year", quantity=100)
NFert::organic_fertilization(source = "Cattle slurry", quantity=100,
frequency = "every year")
NFert::g.table
natural_contribution(location = "Plain adjacent to urbanized areas")
natural_contribution(location = "Plain adjacent to urbanized areas", coef_time = 0.67)
NFert::coef_time
natural_contribution(location = "Plain adjacent to urbanized areas", ccp = "Autumn-winter crop <150 days")
??N_balance
N_balance(expected_yield_tons_ha = 6, crop = "Grano tenero FF (granella)",
ccp = "Autumn-winter crop <150 days",
clay = 10, sand = 40,
Ntot = 1.2, SOM = 2, CN = 8,
oxygen_availability = "Normal",
winter_rain = 160,
start_spring_rain = 160,
previous_crop = "Winter cereals straw removal",
source = "Cattle slurry",
fertorg_frequency = "every year",
location = "Plain adjacent to urbanized areas",
forg_quantity = 100
)
N_balance(expected_yield_tons_ha = 6, crop = "Grano tenero FF (granella)",
ccp = "Autumn-winter crop <150 days",
clay = 10, sand = 40,
Ntot = 1.2, SOM = 2, CN = 8,
oxygen_availability = "Normal",
winter_rain = 160,
start_spring_rain = 160,
prev_crop = "Winter cereals straw removal",
source = "Cattle slurry",
fertorg_frequency = "every year",
location = "Plain adjacent to urbanized areas",
forg_quantity = 100
)
library(NFert)
library(NFert)
library(NFert)
N_balance(expected_yield_tons_ha = 6, crop = "Grano tenero FF (granella)",
ccp = "Autumn-winter crop <150 days",
clay = 10, sand = 40,
Ntot = 1.2, SOM = 2, CN = 8,
oxygen_availability = "Normal",
winter_rain = 160,
start_spring_rain = 160,
prev_crop = "Winter cereals straw removal",
source = "Cattle slurry",
fertorg_frequency = "every year",
location = "Plain adjacent to urbanized areas",
forg_quantity = 100
)
library(NFert)
library(NFert)
N_balance(expected_yield_tons_ha = 6, crop = "Grano tenero FF (granella)",
ccp = "Autumn-winter crop <150 days",
clay = 10, sand = 40,
Ntot = 1.2, SOM = 2, CN = 8,
oxygen_availability = "Normal",
winter_rain = 160,
start_spring_rain = 160,
prev_crop = "Winter cereals straw removal",
source = "Cattle slurry",
fertorg_frequency = "every year",
location = "Plain adjacent to urbanized areas",
forg_quantity = 100
)
calc_crop_N_demand
soil_fertility
leaching_loss
calc_N_immobilization_loss
calc_N_immobilization_loss
calc_N_from_crop_residues
library(NFert)
devtools::load_all(".")
usethis::use_release_issue()
devtools::check()
devtools::test()
test_dir()
test_that()
devtools::check_win_devel()
usethis::use_release_issue()
test_package()
usethis::use_testthat(3)
usethis::use_test()
library(testthat)
library(NFert)
test_check("NFert")
usethis::use_r()
usethis::use_r("NFert")
# This file is part of the standard setup for testthat.
# It is recommended that you do not modify it.
#
# Where should you do additional test configuration?
# Learn more about the roles of various files in:
# * https://r-pkgs.org/testing-design.html#sec-tests-files-overview
# * https://testthat.r-lib.org/articles/special-files.html
library(testthat)
library(NFert)
test_check("NFert")
library(NFert)
?NFert::soil_fertility
devtools::load_all(".")
devtools::test()
# If an error occurs, run this to get more details
rlang::last_trace()
devtools::check_win_devel()
usethis::use_release_issue()
usethis::use_news_md()
usethis::use_cran_comments()
?soil_fertility
usethis::use_release_issue()
usethis::use_github_links()
'add github link'
usethis::use_github_links()
usethis::use_github_links()
urlchecker::url_check()
library(testthat)
library(NFert)
test_check("NFert")
help(package = "testthat")
usethis::use_test()
test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
expect_equal(N_balance(
location = "Plain adjacent to urbanized areas",
expected_yield_tons_ha = 6, crop = "Grano tenero FF (granella)",
ccp = "Autumn-winter crop <150 days",
clay = 10, sand = 40,
Ntot = 1.2, SOM = 2, CN = 8,
oxygen_availability = "Normal",
winter_rain = 160,
start_spring_rain = 160,
prev_crop = "Winter cereals straw removal",
source = "Cattle slurry",
fertorg_frequency = "every year",
forg_quantity = 100
), 4)
N_balance(
location = "Plain adjacent to urbanized areas",
expected_yield_tons_ha = 6, crop = "Grano tenero FF (granella)",
ccp = "Autumn-winter crop <150 days",
clay = 10, sand = 40,
Ntot = 1.2, SOM = 2, CN = 8,
oxygen_availability = "Normal",
winter_rain = 160,
start_spring_rain = 160,
prev_crop = "Winter cereals straw removal",
source = "Cattle slurry",
fertorg_frequency = "every year",
forg_quantity = 100
)
N_balance(
location = "Plain adjacent to urbanized areas",
expected_yield_tons_ha = 6, crop = "Grano tenero FF (granella)",
ccp = "Autumn-winter crop <150 days",
clay = 10, sand = 40,
Ntot = 1.2, SOM = 2, CN = 8,
oxygen_availability = "Normal",
winter_rain = 160,
start_spring_rain = 160,
prev_crop = "Winter cereals straw removal",
source = "Cattle slurry",
fertorg_frequency = "every year",
forg_quantity = 100
)$A.N_requirement
test_that("multiplication works", {
expect_equal(N_balance(
location = "Plain adjacent to urbanized areas",
expected_yield_tons_ha = 6, crop = "Grano tenero FF (granella)",
ccp = "Autumn-winter crop <150 days",
clay = 10, sand = 40,
Ntot = 1.2, SOM = 2, CN = 8,
oxygen_availability = "Normal",
winter_rain = 160,
start_spring_rain = 160,
prev_crop = "Winter cereals straw removal",
source = "Cattle slurry",
fertorg_frequency = "every year",
forg_quantity = 100
)$A.N_requirement, 144)
})
use_test("calc_N_balance") # creates and opens tests/testthat/test-blarg.R
use_test("calc_N_balance") # creates and opens tests/testthat/test-blarg.R
usethis::use_test("calc_N_balance") # creates and opens tests/testthat/test-blarg.R
testthat::test_file("tests/testthat/test-calc_N_balance.R")
library(NFert)
N_balance(
location = "Plain adjacent to urbanized areas",
expected_yield_tons_ha = 6, crop = "Grano tenero FF (granella)",
ccp = "Autumn-winter crop <150 days",
clay = 10, sand = 40,
Ntot = 1.2, SOM = 2, CN = 8,
oxygen_availability = "Normal",
winter_rain = 160,
start_spring_rain = 160,
prev_crop = "Winter cereals straw removal",
source = "Cattle slurry",
fertorg_frequency = "every year",
forg_quantity = 100
)
devtools::test()
devtools::check()
devtools::load_all(".")
library(NFert)
library(NFert)
rm(list=ls())
# Basic image manipulation and visualization
library(raster); library(rgdal)
install.packages("raster")
rm(list=ls())
# Basic image manipulation and visualization
library(raster); library(rgdal)
install.packages("rgdal")
rm(list=ls())
# Basic image manipulation and visualization
library(raster); library(rgdal)
library(sf); library(rasterVis)
install.packages("sf")
rm(list=ls())
# Basic image manipulation and visualization
library(raster); library(rgdal)
library(sf); library(rasterVis)
install.packages("rasterVis")
rm(list=ls())
# Basic image manipulation and visualization
library(raster); library(rgdal)
library(sf); library(rasterVis)
# getwd()
setwd("C:/Users/Michele/OneDrive - Università Cattolica del Sacro Cuore/Progetti/R projects/Agricoltura di precisione - Orzo/Agricoltura di precisione/Input/Rivanazzano") # setto la directory in cui posso trovare gli elementi che mi servono per l'esercitazione
# getwd()
setwd("C:/Users/croci/OneDrive - Università Cattolica del Sacro Cuore/Progetti/R projects/Agricoltura di precisione - Orzo/Agricoltura di precisione/Input/Rivanazzano") # setto la directory in cui posso trovare gli elementi che mi servono per l'esercitazione
# getwd()
setwd("C:/Users/croci/OneDrive - Università Cattolica del Sacro Cuore/Progetti/R projects/Agricoltura di precisione - Orzo/Agricoltura di precisione/Input/Mede") # setto la directory in cui posso trovare gli elementi che mi servono per l'esercitazione
# carico l'immagine precedentmente trasforma in geotiff ricampionato a 10m
r <- stack('S2A_MSIL2A_20190328T102021_N0211_R065_T32TMQ_20190328T180953.tif')
# getwd()
setwd("C:/Users/croci/OneDrive - Università Cattolica del Sacro Cuore/Progetti/R projects/Agricoltura di precisione - Orzo/Agricoltura di precisione/Input/Mede") # setto la directory in cui posso trovare gli elementi che mi servono per l'esercitazione
# carico l'immagine precedentmente trasforma in geotiff ricampionato a 10m
r <- stack('S2A_MSIL2A_20190328T102021_N0211_R065_T32TMQ_20190328T180953.tif')
devtools::install_github("MCroci/NFert")
devtools::load_all(".")
devtools::install_github("MCroci/NFert")
library(NFert)
devtools::load_all(".")
library(NFert)
??NFert::calc_crop_N_demand()
??NFert::calc_crop_N_demand
